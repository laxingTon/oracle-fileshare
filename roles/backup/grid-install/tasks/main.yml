---
# tasks file for grid-install


# tasks file for pre-setup
- name: Ping hosts
  ping:

- name: Copy file using rsync
  synchronize:
    src: /home/eppadmin/oracle-packages/
    dest: /u01/app/oracle/software
  become: yes

- name: Ensure software directory exists
  stat:
    path: /u01/app/oracle/software
  register: software_dir
  become: yes

- name: Unzip Oracle Grid Infrastructure Software
  unarchive:
    src: /u01/app/oracle/software/LINUX.X64_193000_grid_home.zip  # Update with your actual zip file path
    dest: /u01/app/19.3.0/grid
    remote_src: yes
    extra_opts: "-q"
  become_user: oracle
  become: yes

  
- name: Install required packages
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - bc
    - binutils
    #- compat-libcap1
    #- compat-libstdc++-33
    #- dtrace-utils
    - elfutils-libelf
    - elfutils-libelf-devel
    - fontconfig-devel
    - glibc
    - glibc-devel
    - ksh
    - libaio
    - libaio-devel
    #- libdtrace-ctf-devel
    - libXrender
    - libXrender-devel
    - libX11
    - libXau
    - libXi
    - libXtst
    - libgcc
    - librdmacm-devel
    - libstdc++
    - libstdc++-devel
    - libxcb
    - make
    - smartmontools
    - sysstat
    - libnsl
    - libnsl.i686
    - libnsl2
    - libnsl2.i686  
  become: yes

- name: Update all packages
  yum:
    name: "*"
    state: latest
  become: yes


- name: Check if kmod-oracleasm is installed
  command: rpm -q kmod-oracleasm
  register: kmod_oracleasm_installed
  changed_when: false
  failed_when: false
  become: yes

- name: Install kmod-oracleasm
  yum:
    name: kmod-oracleasm
    state: present
  when: kmod_oracleasm_installed.rc != 0
  become: yes

- name: Check if oracleasm-support is installed
  command: rpm -q oracleasm-support
  register: oracleasm_support_installed
  changed_when: false
  failed_when: false
  become: yes

- name: Install oracleasm-support
  command: rpm -ivh /u01/app/oracle/software/oracleasm-support-2.1.11-2.el7.x86_64.rpm
  when: oracleasm_support_installed.rc != 0
  become: yes

- name: Check if oracleasmlib is installed
  command: rpm -q oracleasmlib
  register: oracleasmlib_installed
  changed_when: false
  failed_when: false
  become: yes

- name: Install oracleasmlib
  command: rpm -ivh /u01/app/oracle/software/oracleasmlib-2.0.12-1.el7.x86_64.rpm
  when: oracleasmlib_installed.rc != 0
  become: yes


- name: Check if oracle-database-preinstall-19c is installed
  command: rpm -q i oracle-database-preinstall
  register: oracle_database_preinstall_installed
  changed_when: false
  failed_when: false
  become: yes
  

- name: Install oracle-database-preinstall-19c
  yum:
    name: /u01/app/oracle/software/oracle-database-preinstall-19c-1.0-2.el8.x86_64.rpm
    state: present
  when: oracle_database_preinstall_installed.rc != 0
  become: yes  
  

- name: Check if cvuqdisk is installed
  command: rpm -q cvuqdisk
  register: cvuqdisk_installed
  changed_when: false
  failed_when: false
  become: yes

- name: Install cvuqdisk
  yum:
    name: /u01/app/19.3.0/grid/cv/rpm/cvuqdisk-1.0.10-1.rpm
    state: present
  when: cvuqdisk_installed.rc != 0
  become: yes

- name: Check if partition exists
  shell: "parted /dev/sdd print | grep -q '^ 1 '"
  register: partition_exists
  ignore_errors: yes
  become: yes

- name: Create disk partitions
  parted:
    device: /dev/sdd
    number: 1
    label: gpt
    state: present
    part_start: 0%
    part_end: 100%
  when: partition_exists.rc != 0
  become: yes


- name: Check if response file exists
  stat:
    path: /u01/app/19.3.0/grid/install/response/gridsetup.rsp
  register: response_file_stat
  become: yes
  become_user: oracle

- name: Create backup if response file exists
  command: cp -prf /u01/app/19.3.0/grid/install/response/gridsetup.rsp /u01/app/19.3.0/grid/install/response/gridsetup.rsp.bkp
  when: response_file_stat.stat.exists
  become: yes
  become_user: oracle

- name: Show message and fail if response file doesn't exist
  fail:
    msg: "Response file does not exist"
  when: not response_file_stat.stat.exists

- block:
    - name: Ensure ORACLEASM_ENABLED is set to true
      lineinfile:
        path: /etc/sysconfig/oracleasm
        line: "ORACLEASM_ENABLED=true"
        regexp: "^#?\\s*ORACLEASM_ENABLED="
        state: present

    - name: Ensure ORACLEASM_UID is set to oracle
      lineinfile:
        path: /etc/sysconfig/oracleasm
        line: "ORACLEASM_UID=oracle"
        regexp: "^#?\\s*ORACLEASM_UID="
        state: present

    - name: Ensure ORACLEASM_GID is set to oinstall
      lineinfile:
        path: /etc/sysconfig/oracleasm
        line: "ORACLEASM_GID=oinstall"
        regexp: "^#?\\s*ORACLEASM_GID="
        state: present

    - name: Ensure ORACLEASM_SCANBOOT is set to true
      lineinfile:
        path: /etc/sysconfig/oracleasm
        line: "ORACLEASM_SCANBOOT=true"
        regexp: "^#?\\s*ORACLEASM_SCANBOOT="
        state: present
  become: yes

- name: Check if ASM is already configured
  command: oracleasm status
  register: asm_status
  ignore_errors: yes
  changed_when: false

- block:
    - name: Configure ASM with oracleasm configure
      command: oracleasm configure
      become: yes
      when: asm_status.rc != 0

    - name: Initialize ASM with oracleasm init
      command: oracleasm init
      become: yes
      when: asm_status.rc != 0

    - name: Check ASM status with oracleasm status
      command: oracleasm status
      become: yes
  when: asm_status.rc != 0

- name: Check if ASM disk VOT exists
  shell: oracleasm listdisks | grep "VOT"
  register: asm_disk_check
  ignore_errors: true
  changed_when: false

- name: Create ASM disk VOT
  command: oracleasm createdisk VOT /dev/sdd1
  become: yes
  when: asm_disk_check.rc != 0

- name: Verify ASM disk VOT is created
  shell: oracleasm listdisks | grep "VOT"
  register: asm_disk_verify
  become: yes
  failed_when: asm_disk_verify.rc != 0


- name: Modify response file
  block:
    - name: Ensure each field is present in the response file
      lineinfile:
        path: "/u01/app/19.3.0/grid/install/response/gridsetup.rsp"
        line: "{{ item.key }}={{ item.value }}"
        regexp: "^{{ item.key }}="
      loop:
        - { key: "INVENTORY_LOCATION", value: "/u01/app/oraInventory" }
        - { key: "oracle.install.option", value: "HA_CONFIG" }
        - { key: "ORACLE_BASE", value: "/u01/app/oracle" }
        - { key: "oracle.install.asm.OSDBA", value: "oinstall" }
        - { key: "oracle.install.asm.OSOPER", value: "oinstall" }
        - { key: "oracle.install.asm.OSASM", value: "oinstall" }
        - { key: "oracle.install.crs.config.scanType", value: "LOCAL_SCAN" }
        - { key: "oracle.install.crs.config.ClusterConfiguration", value: "STANDALONE" }
        - { key: "oracle.install.crs.config.configureAsExtendedCluster", value: "false" }
        - { key: "oracle.install.crs.config.gpnp.configureGNS", value: "false" }
        - { key: "oracle.install.crs.config.autoConfigureClusterNodeVIP", value: "false" }
        - { key: "oracle.install.crs.config.gpnp.gnsOption", value: "CREATE_NEW_GNS" }
        - { key: "oracle.install.crs.configureGIMR", value: "false" }
        - { key: "oracle.install.asm.configureGIMRDataDG", value: "false" }
        - { key: "oracle.install.crs.config.useIPMI", value: "false" }
        - { key: "oracle.install.asm.SYSASMPassword", value: "password@123" }
        - { key: "oracle.install.asm.diskGroup.name", value: "VOT" }
        - { key: "oracle.install.asm.diskGroup.redundancy", value: "EXTERNAL" }
        - { key: "oracle.install.asm.diskGroup.AUSize", value: "4" }
        - { key: "oracle.install.asm.diskGroup.disksWithFailureGroupNames", value: "/dev/oracleasm/disks/VOT," }
        - { key: "oracle.install.asm.diskGroup.disks", value: "/dev/oracleasm/disks/VOT" }
        - { key: "oracle.install.asm.diskGroup.diskDiscoveryString", value: "/dev/oracleasm/disks/*" }
        - { key: "oracle.install.asm.monitorPassword", value: "password@123" }
        - { key: "oracle.install.asm.configureAFD", value: "false" }
        - { key: "oracle.install.crs.configureRHPS", value: "false" }
        - { key: "oracle.install.crs.config.ignoreDownNodes", value: "false" }
        - { key: "oracle.install.config.managementOption", value: "NONE" }
        - { key: "oracle.install.crs.rootconfig.executeRootScript", value: "false" }
      check_mode: no
  become: yes
  become_user: oracle

- name: Add or update CV_ASSUME_DISTID in /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^CV_ASSUME_DISTID='
    line: 'CV_ASSUME_DISTID=RHEL8.0'
  become: yes  

- block:
    - name: Check if Oracle user's home directory exists
      stat:
        path: "/home/oracle"
      register: oracle_home_stat

    - name: Create Oracle user's home directory if it doesn't exist
      file:
        path: "/home/oracle"
        state: directory
      when: not oracle_home_stat.stat.exists

    - name: Copy .bash_profile template to Oracle user's home directory
      template:
        src: "bash_profile.j2"
        dest: "/home/oracle/.bash_profile"
        owner: oracle
        group: oinstall
        mode: "0644"
  become: yes
  become_user: oracle

- block:
    - name: Copy grid_env template to Oracle user's home directory
      template:
        src: "grid_env.j2"
        dest: "/home/oracle/grid_env"
        owner: oracle
        group: oinstall
        mode: "0644"
  become: yes
  become_user: oracle

- name: Source .bash_profile
  shell: ". ~/.bash_profile && echo 'Success: .bash_profile sourced'"
  register: bash_profile_result
  changed_when: false
  become: yes
  become_user: oracle

- name: Execute grid_env
  shell: ". ~/grid_env && echo 'Success: grid_env executed'"
  register: grid_env_result
  changed_when: false
  when: bash_profile_result.rc == 0
  become: yes
  become_user: oracle

- name: Print results
  debug:
    msg: "{{ item.stdout }}"
  loop:
    - "{{ bash_profile_result }}"
    - "{{ grid_env_result }}"

- name: Run CVU pre-checks
  shell: "/u01/app/19.3.0/grid/runcluvfy.sh stage -pre hacfg"
  register: cvu_output
  ignore_errors: true
  become: yes
  become_user: oracle

- name: Check if CVU pre-checks passed
  fail:
    msg: "CVU pre-checks failed. Please review the output."
  when: cvu_output.rc != 0
  ignore_errors: yes

- name: Print CVU pre-checks output
  debug:
    var: cvu_output.stdout_lines
  when: cvu_output.rc != 0


- name: Install Grid Software
  shell: "/u01/app/19.3.0/grid/gridSetup.sh -ignorePrereq -silent -responseFile /u01/app/19.3.0/grid/install/response/gridsetup.rsp"
  become: yes
  become_user: oracle
  ignore_errors: yes

- name: Execute root.sh
  shell: "/u01/app/oraInventory/orainstRoot.sh"
  become: yes

- name: Execute root.sh
  shell: "/u01/app/19.3.0/grid/root.sh"
  become: yes

- name: Finish Grid Installations
  shell: "/u01/app/19.3.0/grid/gridSetup.sh -executeConfigTools -responseFile /u01/app/19.3.0/grid/install/response/gridsetup.rsp -silent"
  become: yes
  become_user: oracle

- name: Check Cluster Installation Status
  shell: "/u01/app/19.3.0/grid/bin/crsctl status resource -t"
  become: yes
  register: cluster_status

- name: Check if ASM is running
  shell: "ps -ef | grep smon | grep -v grep"
  become: yes
  register: asm_process_status

- name: Display Cluster Installation Status
  debug:
    msg: "{{ cluster_status.stdout_lines }}"
  when: cluster_status.rc == 0

- name: Display ASM Process Status
  debug:
    msg: "{{ asm_process_status.stdout_lines }}"
  when: asm_process_status.stdout != ""  
